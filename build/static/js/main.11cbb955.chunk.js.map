{"version":3,"sources":["components/TodoForm.jsx","components/Todo.jsx","components/TodoList.jsx","StorageService.js","App.jsx","MultiApps.jsx","serviceWorker.js","index.js"],"names":["TodoForm","props","inputText","React","createRef","className","onSubmit","event","preventDefault","nouvelleTache","intitule","current","value","faite","ref","type","placeholder","Todo","id","checked","tache","onChange","onCheck","htmlFor","onClick","onDelete","TodoList","taches","map","index","key","saveToLocalStorage","localStorage","setItem","JSON","stringify","App","data","storageKey","parse","getItem","useState","setTaches","restantes","filter","t","length","trim","stateTasks","tacheCliquee","tacheADelete","indice","indexOf","splice","MultiApps","keys","Object","appList","setAppList","push","Date","now","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11cbb955.chunk.js","sourcesContent":["import React from 'react';\n\nfunction TodoForm (props){\n    function ajouterTache(event) {\n        event.preventDefault()\n        props.nouvelleTache({ intitule: inputText.current.value, faite: false});\n        inputText.current.value = '';\n    }\n\n    const inputText = React.createRef();\n\n    return (\n        <form className=\"mb-3\" onSubmit={ajouterTache}>\n            <div className=\"input-group\">\n                <input ref={inputText} type=\"text\" className=\"form-control\" placeholder=\"ex: Nourrir le chat...\" />\n                <div className=\"input-group-append\">\n                    <button type=\"submit\" className=\"btn btn-primary\">Ajouter</button>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport default TodoForm;","import React from 'react';\n\nfunction Todo (props) {\n    return (\n        <li className=\"list-group-item d-flex align-items-center\">\n            <input type=\"checkbox\" id={'t'+props.id} checked={props.tache.faite} onChange={() => props.onCheck(props.tache)} />{' '}\n            <label htmlFor={'t'+props.id} className=\"mb-0 ml-1\">{props.tache.intitule}</label>\n    <button className=\"btn btn-danger ml-auto\" onClick={() => props.onDelete(props.tache)}>Supprimer</button>\n        </li>\n    )\n}\n\nexport default Todo;","import React from 'react';\nimport Todo from \"./Todo\";\n\nfunction TodoList (props) {\n    const taches = props.taches;\n\n    return (\n        <ul className=\"list-group\">\n            {taches.map((tache, index) => <Todo key={index} id={index} tache={tache} onCheck={props.onCheck} onDelete={props.onDelete}/>)}\n        </ul>\n    )\n}\n\nexport default TodoList;","export function saveToLocalStorage(key, taches) {\n    localStorage.setItem(key, JSON.stringify(taches));\n}\n\nexport function loadFromLocalStorage(key){\n    return JSON.parse(localStorage.getItem(key)) || [];\n}\n","import React from 'react';\nimport './App.css';\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\nimport {saveToLocalStorage, loadFromLocalStorage}from './StorageService'\n\nfunction App(props) {\n\n    const data = loadFromLocalStorage(props.storageKey);\n\n    const [taches, setTaches] = React.useState(data);\n\n    function ajouterTache(nouvelleTache) {\n        if (nouvelleTache.intitule.trim() === '') {\n            return; // On s'arrête là\n        }\n        const stateTasks = [...taches, nouvelleTache];\n        setTaches(stateTasks);\n        saveToLocalStorage(props.storageKey, stateTasks);\n    }\n\n    function onCheck(tacheCliquee) {\n        setTaches([...taches]);\n        tacheCliquee.faite = !tacheCliquee.faite;\n        saveToLocalStorage(props.storageKey, taches);\n    }\n\n    function onDelete(tacheADelete){\n        let indice = taches.indexOf(tacheADelete);\n        taches.splice(indice, 1);\n        setTaches([...taches]);\n        saveToLocalStorage(props.storageKey, taches);\n    }\n\n    const restantes = taches.filter(t => t.faite === false).length;\n\n    return (\n        <div>\n  \n            <p>{restantes}/{taches.length} tâches restantes</p>\n                        \n            <TodoForm nouvelleTache={ajouterTache} />\n            <TodoList taches={taches} onCheck={onCheck} onDelete={onDelete} />\n        </div>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport App from './App';\nimport { useState } from 'react';\n\nfunction MultiApps(props) {\n\n    const keys = Object.keys(localStorage);\n\n    const[appList, setAppList] = useState(keys);\n\n    function ajouter() {\n        appList.push(Date.now());\n        setAppList([...appList]);\n    }\n\n    return (\n        <div>\n\n            <h1 className=\"text-center\">Todolist React</h1>\n            <p className=\"text-center\">Une todolist avec React JS</p>\n            <button className=\"btn btn-info mb-3\" onClick={ajouter}>Créer une liste</button>\n\n            {appList.map(key => <App storageKey={key} key={key}/>)}\n        \n        </div>\n    );\n}\n\nexport default MultiApps;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MultiApps from './MultiApps';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MultiApps />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}